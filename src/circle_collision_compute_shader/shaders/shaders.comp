#version 450

layout (local_size_x = 128) in;

// Binding 0 : Position storage buffer
layout(binding = 0) buffer Pos 
{
	vec2 positions[];
};

// Binding 1 : Scales storage buffer
layout(binding = 1) readonly buffer Scales 
{
	float scales[];
};

// Binding 2 : Velocities storage buffer
layout(binding = 2) buffer Vel
{
	vec2 velocities[];
};

layout(push_constant) uniform Bounding
{
	int right_wall;
	int bottom_wall;
} bounding;

layout (binding = 3) uniform UBO 
{
	float dt;
	int count;
} ubo;

void main() 
{
	uint i = gl_GlobalInvocationID.x;
    if (i >= ubo.count) 
		return;

	positions[i] += velocities[i] * ubo.dt;

	if (positions[i].y - scales[i] <= 0)
	{
		positions[i].y = scales[i];
		velocities[i].y *= -1;
	}
	else if (positions[i].y + scales[i] >= bounding.bottom_wall)
	{
		positions[i].y = bounding.bottom_wall - scales[i];
		velocities[i].y *= -1;
	}

	if (positions[i].x - scales[i] <= 0)
	{
		positions[i].x = scales[i];
		velocities[i].x *= -1;
	}
	else if (positions[i].x + scales[i] >= bounding.right_wall)
	{
		positions[i].x = bounding.right_wall - scales[i];
		velocities[i].x *= -1;
	}
					
	for (uint j = 0; j < ubo.count; ++j)
	{
		if (i == j)
			continue;
	
		const float dx = positions[i].x - positions[j].x;
		const float dy = positions[i].y - positions[j].y;
		const float dis2 = (dy * dy + dx * dx);
		const float radii = scales[i] + scales[j];
	
		if (dis2 < radii * radii)
		{
			// Move Away
			const float dis = sqrt(dis2);
			const vec2 n = vec2(dx / dis, dy / dis);
			const float covered = radii - dis;
			const vec2 move_vec = n * (covered / 2.0f);
			positions[i] += move_vec;
			positions[j] -= move_vec;
	
			// Change Velocity Direction
			const float m1 = scales[i] * 5.0f;
			const float m2 = scales[j] * 5.0f;
			const float p = 2 * (dot(n, velocities[i]) - dot(n, velocities[j])) / (m1 + m2);
			velocities[i] = (velocities[i] - n * m2 * p);
			velocities[j] = (velocities[j] + n * m1 * p);
		}
	}
}

